OLD WOrkING

// void downloadSucceeded(emscripten_fetch_t *fetch) {
//   printf("Finished downloading %llu bytes from URL %s.\n", fetch->numBytes, fetch->url);
//   // The data is now available at fetch->data[0] through fetch->data[fetch->numBytes-1];
//   emscripten_fetch_close(fetch); // Free data associated with the fetch.
//   memcpy(szTestText, fetch->data, fetch->numBytes);
//   szTestText[fetch->numBytes] = '\0';
//   std::stringstream data(szTestText);


//   const auto read = [&data](float &value) {
//       std::string line;

//       getline(data, line,' ');
//       printf("Read line %s", line.c_str());
//       sscanf(line.c_str(), "%f", &value);
//   };

//   read(ua);
//   read(ur);
//   read(uref); 
//   read(ubat);
//   read(pt1000);
// }

// void setLogging(bool value) {
//     emscripten_fetch_attr_t attr;
//     emscripten_fetch_attr_init(&attr);
//     strcpy(attr.requestMethod, "GET");
//     attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
//     //attr.onsuccess = downloadSucceeded;
//     const std::string url = "api/setLogging?l=" + std::string(value ? "true" : "false");
//     emscripten_fetch(&attr, url.c_str());
// }


void request() {
    emscripten_fetch_attr_t attr;
    emscripten_fetch_attr_init(&attr);
    strcpy(attr.requestMethod, "GET");
    attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
    attr.onsuccess = downloadSucceeded;
    attr.onerror = downloadFailed;
    emscripten_fetch(&attr, "api/val");
}
void readAnalogStatus(int value) {
    emscripten_fetch_attr_t attr;
    emscripten_fetch_attr_init(&attr);
    strcpy(attr.requestMethod, "GET");
    attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
    attr.onsuccess = downloadSucceeded;
    attr.onerror = downloadFailed;
    const std::string url = "api/ctrlAnalogStatus?s="+std::to_string(value);
    emscripten_fetch(&attr, url.c_str());
}


// void downloadFailed(emscripten_fetch_t *fetch) {
//   printf("Downloading %s failed, HTTP failure status code: %d.\n", fetch->url, fetch->status);
//   emscripten_fetch_close(fetch); // Also free data on failure.
  
// }
// void handleAnalogValues(const std::string& data) {
//     std::stringstream dataStream(data);

//     const auto read = [&dataStream](float &value) {
//         std::string line;
//         getline(dataStream, line, ' ');
//         printf("Read line %s\n", line.c_str());
//         sscanf(line.c_str(), "%f", &value);
//     };

//     read(ua);
//     read(ur);
//     read(uref); 
//     read(ubat);
//     read(pt1000);

//     printf("UA: %f, UR: %f, UREF: %f, UBAT: %f, PT1000: %f\n", ua, ur, uref, ubat, pt1000);
// }
// void handleSetLogging(const std::string& data) {
//     std::stringstream dataStream(data);
//     const auto read = [&dataStream](float &value) {
//         std::string line;
//         getline(dataStream, line, ' ');
//         printf("Read line %s\n", line.c_str());
//         sscanf(line.c_str(), "%f", &value);
//     };
   
// };
// void handleSetHeating(const std::string& data) {
//     std::stringstream dataStream(data);
//     const auto read = [&dataStream](float &value) {
//         std::string line;
//         getline(dataStream, line, ' ');
//         printf("Read line %s\n", line.c_str());
//         sscanf(line.c_str(), "%f", &value);
//     };
   
// };
// void setLogging(bool value) {
//     // Create a context with the appropriate handler
//     FetchContext* context = new FetchContext{handleSetLogging};

//     // Initialize fetch attributes
//     emscripten_fetch_attr_t attr;
//     emscripten_fetch_attr_init(&attr);
//     strcpy(attr.requestMethod, "GET");
//     attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
//     attr.onsuccess = downloadSucceeded;
//     attr.onerror = downloadFailed; // Assuming you have a downloadFailed function
//     attr.userData = context;

//     // Construct the URL with the logging value
//     const std::string url = "api/setLogging?l=" + std::string(value ? "true" : "false");
//     emscripten_fetch(&attr, url.c_str());
// }
// void setHeating(bool value) {
//     // Create a context with the appropriate handler
//     FetchContext* context = new FetchContext{handleSetLogging};

//     // Initialize fetch attributes
//     emscripten_fetch_attr_t attr;
//     emscripten_fetch_attr_init(&attr);
//     strcpy(attr.requestMethod, "GET");
//     attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
//     attr.onsuccess = downloadSucceeded;
//     attr.onerror = downloadFailed; // Assuming you have a downloadFailed function
//     attr.userData = context;

//     const std::string url = "api/setHeating?h=" + std::string(value ? "true" : "false");
//     emscripten_fetch(&attr, url.c_str());
// }